solution(5, [2, 1, 2, 6, 2, 4, 3, 3]);

function solution(N, stages) {
    var answer = [];
    let user = stages.length;

    for (let i = 1; i <= N; i++) {
        let failCnt = stages.filter(stage => stage == i).length; // 클리어 못 한 사람 

        answer.push({stage : i, fail : failCnt/user});
        user = user - failCnt;
    } 
    answer.sort((a,b) => b.fail - a.fail); // 내림차순

    return answer.map((arr) => arr.stage);
}



/* 
방법
1. stages 는 각 스테이지에 도착했지만 실패한 사람들 수
2. 각 스테이지 별 실패율은 클리어 못 한 사람 / 총 도전자(stages.length) 
    다음 스테이지에서 스테이지 참가자 수 - 각 스테이지 실패 인원수
3. 스테이지 개수 반복 -> stages에서 현재 스테이지 = 도전 스테이지 같으면 fail에 대입
4. fail을 그냥 출력하면 [1] [2,2,2] [3,3] 이렇게 나와서 length로 대입해야함
5. map으로 answer 배열 순환해서 stage만 반환
    배열.map((요소, 인덱스, 배열) => { return 요소 });
 
  
문제
1. 실패율 스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수
2. 전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호 배열 stages
3. 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열 return 
4. 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.
5. 스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0 으로 정의한다.
6. 입출력 예
N	stages	                    result
5	[2, 1, 2, 6, 2, 4, 3, 3]	[3,4,2,1,5]
4	[4,4,4,4,4]	                [4,1,2,3]

1번 스테이지에는 총 8명의 사용자가 도전했으며, 이 중 1명의 사용자가 아직 클리어하지 못했다. 따라서 1번 스테이지의 실패율은 다음과 같다.
1 번 스테이지 실패율 : 1/8

2번 스테이지에는 총 7명의 사용자가 도전했으며, 이 중 3명의 사용자가 아직 클리어하지 못했다. 따라서 2번 스테이지의 실패율은 다음과 같다.
2 번 스테이지 실패율 : 3/7

마찬가지로 나머지 스테이지의 실패율은 다음과 같다.

3 번 스테이지 실패율 : 2/4
4번 스테이지 실패율 : 1/2
5번 스테이지 실패율 : 0/1
각 스테이지의 번호를 실패율의 내림차순으로 정렬하면 다음과 같다.

[3,4,2,1,5]

입출력 예 #2
모든 사용자가 마지막 스테이지에 있으므로 4번 스테이지의 실패율은 1이며 나머지 스테이지의 실패율은 0이다.

[4,1,2,3]
*/